/*
 * Copyright (C) 2015 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.gradle.wrapper;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URL;
import java.nio.channels.Channels;
import java.nio.channels.FileChannel;
import java.nio.channels.ReadableByteChannel;
import java.util.Properties;

public class GradleWrapperMain {

    private static final String DEFAULT_GRADLE_USER_HOME_PROPERTY = "gradle.user.home";
    private static final String GRADLE_USER_HOME_SYSTEM_PROPERTY = "gradle.user.home";
    private static final String GRADLE_USER_HOME_ENV = "GRADLE_USER_HOME";
    private static final String DEFAULT_REPOSITORY_BASE = "https://services.gradle.org/distributions";
    private static final String DEFAULT_DISTRIBUTION_BASE = "GRADLE_USER_HOME";
    private static final String DEFAULT_DISTRIBUTION_PATH = "wrapper/dists";
    private static final String DEFAULT_DISTRIBUTION_URL = DEFAULT_REPOSITORY_BASE + "/gradle-{gradleVersion}-bin.zip";

    public static void main(String[] args) throws Exception {
        File rootDir = new File(System.getProperty("user.dir"));
        File propertiesFile = new File(rootDir, "gradle" + File.separator + "wrapper" + File.separator + "gradle-wrapper.properties");
        if (!propertiesFile.exists()) {
            throw new RuntimeException("Details of Gradle wrapper configuration are not found (" + propertiesFile.getAbsolutePath() + ").");
        }

        Properties properties = new Properties();
        FileInputStream fis = new FileInputStream(propertiesFile);
        try {
            properties.load(fis);
        } finally {
            fis.close();
        }

        String distributionUrl = properties.getProperty("distributionUrl");
        String distributionBase = properties.getProperty("distributionBase", DEFAULT_DISTRIBUTION_BASE);
        String distributionPath = properties.getProperty("distributionPath", DEFAULT_DISTRIBUTION_PATH);

        File gradleUserHome = getGradleUserHome(properties);
        File baseDir;
        if (DEFAULT_DISTRIBUTION_BASE.equals(distributionBase)) {
            baseDir = new File(gradleUserHome, distributionPath);
        } else {
            String systemProperty = System.getProperty(distributionBase.toLowerCase().replace(".", ""));
            if (systemProperty != null) {
                baseDir = new File(systemProperty, distributionPath);
            } else {
                throw new RuntimeException("No valid distribution base found");
            }
        }

        File zipFile = new File(baseDir, getZipName(distributionUrl));
        if (!zipFile.exists()) {
            download(distributionUrl, zipFile);
        }

        File unzippedDir = new File(zipFile.getParentFile(), getUnzippedName(zipFile.getName()));
        if (!unzippedDir.isDirectory()) {
            unzippedDir.delete();
            unzip(zipFile, zipFile.getParentFile());
        }

        File gradleHome = new File(unzippedDir, getGradleHomeName(distributionUrl));
        System.setProperty("gradle.home", gradleHome.getAbsolutePath());

        String[] actualArgs = new String[args.length + 2];
        actualArgs[0] = "org.gradle.launcher.GradleMain";
        System.arraycopy(args, 0, actualArgs, 1, args.length);
        actualArgs[actualArgs.length - 1] = propertiesFile.getAbsolutePath();

        org.gradle.launcher.bootstrap.BootstrapMainStarter.main(actualArgs);
    }

    private static File getGradleUserHome(Properties properties) {
        String gradleUserHomeProperty = properties.getProperty(DEFAULT_GRADLE_USER_HOME_PROPERTY);
        if (gradleUserHomeProperty != null) {
            return new File(gradleUserHomeProperty);
        }
        String gradleUserHomeSystemProperty = System.getProperty(GRADLE_USER_HOME_SYSTEM_PROPERTY);
        if (gradleUserHomeSystemProperty != null) {
            return new File(gradleUserHomeSystemProperty);
        }
        String gradleUserHomeEnv = System.getenv(GRADLE_USER_HOME_ENV);
        if (gradleUserHomeEnv != null) {
            return new File(gradleUserHomeEnv);
        }
        return new File(System.getProperty("user.home"), ".gradle");
    }

    private static String getZipName(String distributionUrl) {
        String[] parts = distributionUrl.split("/");
        return parts[parts.length - 1];
    }

    private static String getUnzippedName(String zipName) {
        return zipName.substring(0, zipName.lastIndexOf(".zip"));
    }

    private static String getGradleHomeName(String distributionUrl) {
        String zipName = getZipName(distributionUrl);
        return zipName.substring(0, zipName.lastIndexOf("-bin.zip"));
    }

    private static void download(String distributionUrl, File zipFile) throws IOException {
        System.out.println("Downloading " + distributionUrl);
        URL url = new URL(distributionUrl);
        ReadableByteChannel rbc = Channels.newChannel(url.openStream());
        FileChannel fileChannel = new FileOutputStream(zipFile).getChannel();
        fileChannel.transferFrom(rbc, 0, Long.MAX_VALUE);
        fileChannel.close();
        rbc.close();
        System.out.println("Downloaded to " + zipFile.getAbsolutePath());
    }

    private static void unzip(File zipFile, File destDir) throws IOException {
        // Simplified extraction - in a real wrapper this would have full ZIP handling
        System.out.println("Extracting " + zipFile.getAbsolutePath() + " to " + destDir.getAbsolutePath());
    }
}