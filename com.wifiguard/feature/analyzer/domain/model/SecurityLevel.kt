package com.wifiguard.feature.analyzer.domain.model

/**
 * Уровни безопасности Wi-Fi сетей.
 * Определяет степень риска для пользователя при подключении к сети.
 * Используется для визуальной индикации и принятия решений о безопасности.
 */
enum class SecurityLevel(
    /**
     * Отображаемое название уровня безопасности.
     */
    val displayName: String,
    
    /**
     * Описание уровня для пользователя.
     */
    val description: String,
    
    /**
     * Числовое значение уровня риска (1-3, где 3 - максимальный риск).
     * Используется для сортировки и сравнения уровней.
     */
    val riskValue: Int
) {
    /** 
     * Низкий риск - современные протоколы (WPA3, WPA2 с правильной конфигурацией).
     * Относительно безопасно для использования.
     */
    LOW(
        displayName = "Низкий риск",
        description = "Сеть относительно безопасна для использования",
        riskValue = 1
    ),
    
    /** 
     * Средний риск - WPA/WPA2 с потенциальными уязвимостями.
     * Требует осторожности при использовании.
     */
    MEDIUM(
        displayName = "Средний риск",
        description = "Соблюдайте осторожность при использовании",
        riskValue = 2
    ),
    
    /** 
     * Высокий риск - открытые сети или устаревшие протоколы (WEP).
     * Настоятельно не рекомендуется для подключения.
     */
    HIGH(
        displayName = "Высокий риск",
        description = "Не рекомендуется для подключения",
        riskValue = 3
    );
    
    /**
     * Проверяет, является ли уровень безопасным для использования.
     * Безопасными считаются только сети с низким уровнем риска.
     */
    val isSafe: Boolean
        get() = this == LOW
    
    /**
     * Проверяет, требует ли уровень особой осторожности.
     * Осторожность рекомендуется для средних и высоких уровней риска.
     */
    val requiresCaution: Boolean
        get() = riskValue >= 2
    
    /**
     * Проверяет, является ли сеть критически небезопасной.
     * Критически небезопасными считаются только сети с высоким риском.
     */
    val isCritical: Boolean
        get() = this == HIGH
    
    companion object {
        /**
         * Получает все уровни безопасности, отсортированные по уровню риска.
         * @param ascending true для сортировки по возрастанию, false - по убыванию
         * @return Отсортированный список уровней безопасности
         */
        fun sortedByRisk(ascending: Boolean = true): List<SecurityLevel> {
            return values().sortedBy { if (ascending) it.riskValue else -it.riskValue }
        }
        
        /**
         * Получает уровень безопасности по числовому значению риска.
         * @param riskValue Числовое значение риска (1-3)
         * @return Уровень безопасности или LOW по умолчанию
         */
        fun fromRiskValue(riskValue: Int): SecurityLevel {
            return values().find { it.riskValue == riskValue } ?: LOW
        }
        
        /**
         * Получает максимальный уровень риска из предоставленного списка.
         * Используется для определения общего уровня риска группы сетей.
         * @param levels Список уровней безопасности
         * @return Максимальный уровень риска или LOW, если список пуст
         */
        fun maxRisk(levels: List<SecurityLevel>): SecurityLevel {
            return levels.maxByOrNull { it.riskValue } ?: LOW
        }
    }
}