package com.wifiguard.feature.scanner.domain.usecase

import android.util.Log
import com.wifiguard.core.common.Constants
import com.wifiguard.core.common.Resource
import com.wifiguard.feature.scanner.domain.model.WifiInfo
import com.wifiguard.feature.scanner.domain.repository.WifiScannerRepository
import com.wifiguard.feature.analyzer.domain.usecase.AnalyzeSecurityUseCase
import javax.inject.Inject

/**
 * Use Case –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:
 * - –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π –ø–æ–¥–∫–ª—é—á—ë–Ω–Ω–æ–π —Å–µ—Ç–∏
 * - –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —É—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
 * - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —É–≥—Ä–æ–∑—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * 
 * –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ:
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
 * - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
 * - –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å —Å–µ—Ç—å—é
 * 
 * @param repository —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wi-Fi –¥–∞–Ω–Ω—ã–º–∏
 * @param analyzeSecurityUseCase use case –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * 
 * @author WifiGuard Domain Team
 * @since 1.0.0
 */
class GetActiveWifiUseCase @Inject constructor(
    private val repository: WifiScannerRepository,
    private val analyzeSecurityUseCase: AnalyzeSecurityUseCase
) {
    
    companion object {
        private const val TAG = "${Constants.LogTags.WIFI_SCANNER}_GetActiveWifi"
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     * 
     * @return Resource —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–π —Å–µ—Ç–∏
     */
    suspend operator fun invoke(): Resource<ActiveConnectionInfo?> {
        return try {
            Log.d(TAG, "üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
            
            // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            when (val result = repository.getCurrentConnection()) {
                is Resource.Success -> {
                    val currentNetwork = result.data
                    
                    if (currentNetwork == null) {
                        Log.d(TAG, "üìµ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                        return Resource.Success(null)
                    }
                    
                    // 2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
                    val securityAnalysis = analyzeSecurityUseCase(currentNetwork)
                    
                    when (securityAnalysis) {
                        is Resource.Success -> {
                            val analysisResult = securityAnalysis.data
                            
                            // 3. –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
                            val activeConnectionInfo = createActiveConnectionInfo(
                                network = currentNetwork,
                                securityAnalysis = analysisResult
                            )
                            
                            Log.i(TAG, "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ${currentNetwork.displayName}: ${analysisResult.securityLevel}")
                            Resource.Success(activeConnectionInfo)
                        }
                        
                        is Resource.Error -> {
                            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", securityAnalysis.throwable)
                            
                            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–µ—Ç—å –±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
                            val basicConnectionInfo = createActiveConnectionInfo(
                                network = currentNetwork,
                                securityAnalysis = null
                            )
                            
                            Resource.Success(basicConnectionInfo)
                        }
                        
                        is Resource.Loading -> Resource.Loading()
                    }
                }
                
                is Resource.Error -> {
                    Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", result.throwable)
                    Resource.Error(result.throwable)
                }
                
                is Resource.Loading -> Resource.Loading()
            }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", e)
            Resource.Error(Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–¥–µ–Ω–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏", e))
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     */
    private fun createActiveConnectionInfo(
        network: WifiInfo,
        securityAnalysis: com.wifiguard.feature.analyzer.domain.model.ThreatAssessment?
    ): ActiveConnectionInfo {
        return ActiveConnectionInfo(
            network = network,
            connectionQuality = determineConnectionQuality(network),
            securityLevel = securityAnalysis?.securityLevel,
            threatAssessment = securityAnalysis,
            recommendations = generateRecommendations(network, securityAnalysis),
            diagnostics = generateDiagnostics(network),
            timestamp = System.currentTimeMillis()
        )
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∏–ª—ã —Å–∏–≥–Ω–∞–ª–∞
     */
    private fun determineConnectionQuality(network: WifiInfo): ConnectionQuality {
        return when {
            network.signalStrength >= -50 -> ConnectionQuality.EXCELLENT
            network.signalStrength >= -60 -> ConnectionQuality.GOOD
            network.signalStrength >= -70 -> ConnectionQuality.FAIR
            network.signalStrength >= -80 -> ConnectionQuality.POOR
            else -> ConnectionQuality.VERY_POOR
        }
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏
     */
    private fun generateRecommendations(
        network: WifiInfo,
        securityAnalysis: com.wifiguard.feature.analyzer.domain.model.ThreatAssessment?
    ): List<String> {
        val recommendations = mutableListOf<String>()
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        when (network.encryptionType) {
            com.wifiguard.feature.scanner.domain.model.EncryptionType.OPEN -> {
                recommendations.add("‚ö†Ô∏è –û—Ç–∫—Ä—ã—Ç–∞—è —Å–µ—Ç—å! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ VPN")
                recommendations.add("üö´ –ò–∑–±–µ–≥–∞–π—Ç–µ –ø–µ—Ä–µ–¥–∞—á–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            }
            com.wifiguard.feature.scanner.domain.model.EncryptionType.WEP -> {
                recommendations.add("‚ùå –û—á–µ–Ω—å —Å–ª–∞–±–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ! –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ WPA2/WPA3")
                recommendations.add("üö´ –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –¥–ª—è –≤–∞–∂–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            }
            com.wifiguard.feature.scanner.domain.model.EncryptionType.WPA -> {
                recommendations.add("‚ö†Ô∏è –£—Å—Ç–∞—Ä–µ–≤—à–∏–π –ø—Ä–æ—Ç–æ–∫–æ–ª. –û–±–Ω–æ–≤–∏—Ç–µ –¥–æ WPA2")
            }
            com.wifiguard.feature.scanner.domain.model.EncryptionType.WPA2 -> {
                recommendations.add("‚úÖ –ù–∞–¥—ë–∂–Ω–æ–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ")
                recommendations.add("üîÑ –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ WPA3")
            }
            com.wifiguard.feature.scanner.domain.model.EncryptionType.WPA3 -> {
                recommendations.add("üîí –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞")
                recommendations.add("‚ú® –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
            }
            com.wifiguard.feature.scanner.domain.model.EncryptionType.UNKNOWN -> {
                recommendations.add("‚ùì –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ç–∏–ø —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è")
                recommendations.add("üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–æ—É—Ç–µ—Ä–∞")
            }
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞
        when (determineConnectionQuality(network)) {
            ConnectionQuality.VERY_POOR -> {
                recommendations.add("üì∂ –û—á–µ–Ω—å —Å–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª! –ü–æ–¥–æ–π–¥–∏—Ç–µ –±–ª–∏–∂–µ –∫ —Ä–æ—É—Ç–µ—Ä—É")
            }
            ConnectionQuality.POOR -> {
                recommendations.add("üì∂ –°–ª–∞–±—ã–π —Å–∏–≥–Ω–∞–ª. –ú–æ–≥—É—Ç –±—ã—Ç—å –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è")
            }
            ConnectionQuality.FAIR -> {
                recommendations.add("üì∂ –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
            }
            ConnectionQuality.GOOD -> {
                recommendations.add("‚úÖ –•–æ—Ä–æ—à–∏–π —Å–∏–≥–Ω–∞–ª")
            }
            ConnectionQuality.EXCELLENT -> {
                recommendations.add("‚ú® –û—Ç–ª–∏—á–Ω—ã–π —Å–∏–≥–Ω–∞–ª")
            }
        }
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω—É —á–∞—Å—Ç–æ—Ç
        when (network.frequencyBand) {
            "2.4 –ì–ì—Ü" -> {
                recommendations.add("üì∂ 2.4 –ì–ì—Ü: –±–æ–ª—å—à–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å, –º–µ–Ω—å—à–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å")
            }
            "5 –ì–ì—Ü" -> {
                recommendations.add("‚ö° 5 –ì–ì—Ü: –≤—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å, –º–µ–Ω—å—à–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å")
            }
            "6 –ì–ì—Ü" -> {
                recommendations.add("üöÄ 6 –ì–ì—Ü: –Ω–æ–≤–µ–π—à–∏–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç Wi-Fi 6E/7")
            }
        }
        
        return recommendations
    }
    
    /**
     * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∏
     */
    private fun generateDiagnostics(network: WifiInfo): NetworkDiagnostics {
        return NetworkDiagnostics(
            signalStrengthDbm = network.signalStrength,
            signalPercentage = network.signalPercentage,
            frequency = network.frequency,
            frequencyBand = network.frequencyBand,
            encryptionType = network.encryptionType,
            isHiddenNetwork = network.isHidden,
            estimatedRange = estimateRange(network.signalStrength, network.frequency),
            channelInfo = getChannelInfo(network.frequency),
            interferenceLevel = estimateInterference(network.frequency)
        )
    }
    
    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ä–æ—É—Ç–µ—Ä–∞
     */
    private fun estimateRange(signalStrength: Int, frequency: Int): String {
        val baseRange = when {
            signalStrength >= -30 -> "1-2 –º"
            signalStrength >= -50 -> "5-10 –º"
            signalStrength >= -60 -> "10-20 –º"
            signalStrength >= -70 -> "20-50 –º"
            signalStrength >= -80 -> "50-100 –º"
            else -> "100+ –º"
        }
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
        val modifier = if (frequency > 5000) " (–º–µ–Ω—å—à–∞—è –¥–∞–ª—å–Ω–æ—Å—Ç—å –Ω–∞ 5/6 –ì–ì—Ü)" else ""
        return baseRange + modifier
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
     */
    private fun getChannelInfo(frequency: Int): String {
        val channel = when {
            frequency in 2412..2484 -> (frequency - 2412) / 5 + 1
            frequency in 5000..5900 -> (frequency - 5000) / 5
            else -> 0
        }
        
        return if (channel > 0) "–ö–∞–Ω–∞–ª $channel" else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"
    }
    
    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å—Ç–æ—Ç—ã
     */
    private fun estimateInterference(frequency: Int): InterferenceLevel {
        return when (frequency) {
            // 2.4 –ì–ì—Ü - –º–Ω–æ–≥–æ –ø–æ–º–µ—Ö –æ—Ç Bluetooth, –º–∏–∫—Ä–æ–≤–æ–ª–Ω–æ–≤–æ–∫
            in 2400..2500 -> InterferenceLevel.HIGH
            // 5 –ì–ì—Ü - –º–µ–Ω—å—à–µ –ø–æ–º–µ—Ö
            in 5000..5900 -> InterferenceLevel.MEDIUM
            // 6 –ì–ì—Ü - –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—Ö–∏ (–Ω–æ–≤—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω)
            in 5925..7125 -> InterferenceLevel.LOW
            else -> InterferenceLevel.UNKNOWN
        }
    }
    
    /**
     * –ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     */
    data class ActiveConnectionInfo(
        val network: WifiInfo,
        val connectionQuality: ConnectionQuality,
        val securityLevel: com.wifiguard.feature.analyzer.domain.model.SecurityLevel?,
        val threatAssessment: com.wifiguard.feature.analyzer.domain.model.ThreatAssessment?,
        val recommendations: List<String>,
        val diagnostics: NetworkDiagnostics,
        val timestamp: Long
    )
    
    /**
     * –ö–∞—á–µ—Å—Ç–≤–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    enum class ConnectionQuality {
        EXCELLENT,  // -30 –¥–æ -50 dBm
        GOOD,       // -50 –¥–æ -60 dBm
        FAIR,       // -60 –¥–æ -70 dBm
        POOR,       // -70 –¥–æ -80 dBm
        VERY_POOR   // –Ω–∏–∂–µ -80 dBm
    }
    
    /**
     * –£—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö
     */
    enum class InterferenceLevel {
        LOW,     // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ–º–µ—Ö–∏
        MEDIUM,  // –£–º–µ—Ä–µ–Ω–Ω—ã–µ –ø–æ–º–µ—Ö–∏
        HIGH,    // –í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –ø–æ–º–µ—Ö
        UNKNOWN  // –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –ø–æ–º–µ—Ö–∏
    }
    
    /**
     * –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Å–µ—Ç–∏
     */
    data class NetworkDiagnostics(
        val signalStrengthDbm: Int,
        val signalPercentage: Int,
        val frequency: Int,
        val frequencyBand: String,
        val encryptionType: com.wifiguard.feature.scanner.domain.model.EncryptionType,
        val isHiddenNetwork: Boolean,
        val estimatedRange: String,
        val channelInfo: String,
        val interferenceLevel: InterferenceLevel
    )
}