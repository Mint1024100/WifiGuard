package com.wifiguard.feature.scanner.data.datasource

import android.Manifest
import android.content.Context
import android.content.pm.PackageManager
import android.net.wifi.ScanResult
import android.net.wifi.WifiManager
import android.os.Build
import android.util.Log
import androidx.core.app.ActivityCompat
import com.wifiguard.core.common.Constants
import com.wifiguard.core.security.SecurityManager
import com.wifiguard.feature.scanner.data.model.WifiInfoDto
import dagger.hilt.android.qualifiers.ApplicationContext
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.withContext
import javax.inject.Inject
import javax.inject.Singleton

/**
 * –õ–æ–∫–∞–ª—å–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Wi-Fi —Å–µ—Ç–µ–π
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
 * - –í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å Android WifiManager API
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Wi-Fi
 * - –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ ScanResult –≤ WifiInfoDto
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∏ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
 * - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç–æ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏:
 * - –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω –¥–ª—è API 26+ (—Ç–∞—Ä–≥–µ—Ç 35)
 * - –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤—Å–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∏–∞–ø–∞–∑–æ–Ω—ã: 2.4/5/6 –ì–ì—Ü
 * - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Android –ø–æ —á–∞—Å—Ç–æ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * - –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
 * 
 * @param context –ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–∏—Å—Ç–µ–º–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º
 * 
 * @author WifiGuard Data Team
 * @since 1.0.0
 */
@Singleton
class WifiDataSource @Inject constructor(
    @ApplicationContext private val context: Context
) {
    
    companion object {
        private const val TAG = Constants.LogTags.WIFI_SCANNER
        
        // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è Android –ø–æ —á–∞—Å—Ç–æ—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        private const val MIN_SCAN_INTERVAL_MS = 4000L // 4 —Å–µ–∫—É–Ω–¥—ã –º–∏–Ω–∏–º—É–º
        private const val SCAN_THROTTLE_COUNT = 4 // –ú–∞–∫—Å 4 —Å–∫–∞–Ω–∞ –≤ 2 –º–∏–Ω—É—Ç—ã
        private const val SCAN_THROTTLE_WINDOW_MS = 120_000L // 2 –º–∏–Ω—É—Ç—ã
    }
    
    private val wifiManager: WifiManager by lazy {
        context.applicationContext.getSystemService(Context.WIFI_SERVICE) as WifiManager
    }
    
    // –£—á—ë—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ–±—Ö–æ–¥–∞ Android throttling
    private var lastScanTime: Long = 0
    private val scanTimestamps = mutableListOf<Long>()
    
    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Wi-Fi —Å–µ—Ç–µ–π
     * 
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è, —Å–æ—Å—Ç–æ—è–Ω–∏–µ Wi-Fi –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
     * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç Android throttling –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è API.
     * 
     * @param forceRefresh –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å throttling –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
     * @return –°–ø–∏—Å–æ–∫ WifiInfoDto —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     * @throws SecurityException –µ—Å–ª–∏ –Ω–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
     * @throws IllegalStateException –µ—Å–ª–∏ Wi-Fi –æ—Ç–∫–ª—é—á—ë–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
     */
    suspend fun scanWifiNetworks(forceRefresh: Boolean = false): List<WifiInfoDto> = 
        withContext(Dispatchers.IO) {
            Log.d(TAG, "üîé –ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Wi-Fi —Å–µ—Ç–µ–π (forceRefresh=$forceRefresh)")
            
            // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            validatePermissions()
            
            // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Wi-Fi
            validateWifiState()
            
            // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ throttling (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
            if (!forceRefresh && isThrottled()) {
                Log.d(TAG, "‚è±Ô∏è –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ –∏–∑-–∑–∞ Android throttling")
                throw IllegalStateException(
                    "–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
                )
            }
            
            // 4. –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            val scanStarted = wifiManager.startScan()
            if (!scanStarted) {
                Log.e(TAG, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                throw IllegalStateException(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Wi-Fi. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞."
                )
            }
            
            // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É throttling
            updateScanTimestamps()
            
            // 6. –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            // Android –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å 1-3 —Å–µ–∫—É–Ω–¥—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            delay(2000L)
            
            // 7. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            val scanResults = try {
                wifiManager.scanResults
            } catch (e: SecurityException) {
                Log.e(TAG, "‚ùå –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", e)
                throw SecurityException("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é")
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", e)
                emptyList()
            }
            
            // 8. –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ DTO —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
            val wifiInfoList = scanResults.mapNotNull { scanResult ->
                try {
                    convertToWifiInfoDto(scanResult)
                } catch (e: Exception) {
                    Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–µ—Ç–∏ ${scanResult.SSID}: ${e.message}")
                    null // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                }
            }
            
            // 9. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            Log.i(TAG, "‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${wifiInfoList.size} Wi-Fi —Å–µ—Ç–µ–π")
            
            if (Constants.ENABLE_DEBUG_LOGGING) {
                logScanResults(wifiInfoList)
            }
            
            wifiInfoList
        }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     */
    suspend fun getCurrentConnection(): WifiInfoDto? = withContext(Dispatchers.IO) {
        try {
            validatePermissions()
            
            val connectionInfo = wifiManager.connectionInfo ?: return@withContext null
            val currentSSID = connectionInfo.ssid?.removeSurrounding("\"") ?: return@withContext null
            val currentBSSID = connectionInfo.bssid ?: return@withContext null
            
            // –ü–æ–∏—â–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ç—å –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            val scanResults = wifiManager.scanResults
            val currentNetwork = scanResults.find { 
                it.SSID == currentSSID && it.BSSID == currentBSSID 
            }
            
            currentNetwork?.let { convertToWifiInfoDto(it) }
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", e)
            null
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä–∞
     */
    fun isWifiEnabled(): Boolean = wifiManager.isWifiEnabled
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    fun hasRequiredPermissions(): Boolean {
        val locationPermission = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            // Android 10+ —Ç—Ä–µ–±—É–µ—Ç FINE_LOCATION
            ActivityCompat.checkSelfPermission(
                context, 
                Manifest.permission.ACCESS_FINE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        } else {
            // Android 9 –∏ –Ω–∏–∂–µ - –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ COARSE_LOCATION
            ActivityCompat.checkSelfPermission(
                context,
                Manifest.permission.ACCESS_COARSE_LOCATION
            ) == PackageManager.PERMISSION_GRANTED
        }
        
        val wifiStatePermission = ActivityCompat.checkSelfPermission(
            context,
            Manifest.permission.ACCESS_WIFI_STATE
        ) == PackageManager.PERMISSION_GRANTED
        
        return locationPermission && wifiStatePermission
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –∏ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
     */
    private fun validatePermissions() {
        if (!hasRequiredPermissions()) {
            throw SecurityException(Constants.ErrorMessages.LOCATION_PERMISSION_REQUIRED)
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä–∞
     */
    private fun validateWifiState() {
        if (!wifiManager.isWifiEnabled) {
            throw IllegalStateException(Constants.ErrorMessages.WIFI_NOT_ENABLED)
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–µ —Å–ª–∏—à–∫–æ–º –ª–∏ —á–∞—Å—Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
     */
    private fun isThrottled(): Boolean {
        val currentTime = System.currentTimeMillis()
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
        if (currentTime - lastScanTime < MIN_SCAN_INTERVAL_MS) {
            return true
        }
        
        // –û—á–∏—â–∞–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
        scanTimestamps.removeAll { currentTime - it > SCAN_THROTTLE_WINDOW_MS }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –æ–∫–Ω–µ
        return scanTimestamps.size >= SCAN_THROTTLE_COUNT
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    private fun updateScanTimestamps() {
        val currentTime = System.currentTimeMillis()
        lastScanTime = currentTime
        scanTimestamps.add(currentTime)
    }
    
    /**
     * –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç Android ScanResult –≤ WifiInfoDto
     */
    private fun convertToWifiInfoDto(scanResult: ScanResult): WifiInfoDto {
        return WifiInfoDto(
            ssid = scanResult.SSID ?: "",
            bssid = scanResult.BSSID ?: "",
            capabilities = scanResult.capabilities ?: "",
            frequency = scanResult.frequency,
            level = scanResult.level,
            timestamp = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                scanResult.timestamp / 1000 // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥ –≤ –º—Å
            } else {
                @Suppress("DEPRECATION")
                scanResult.timestamp / 1000
            },
            channelWidth = if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
                mapChannelWidth(scanResult.channelWidth)
            } else {
                determineChannelWidthByFrequency(scanResult.frequency)
            },
            is5GHz = scanResult.frequency in Constants.FREQ_5_GHZ_MIN..Constants.FREQ_5_GHZ_MAX,
            is6GHz = scanResult.frequency >= 5925, // 6 –ì–ì—Ü –¥–∏–∞–ø–∞–∑–æ–Ω
            metadata = extractMetadata(scanResult)
        )
    }
    
    /**
     * –ú–∞–ø–ø–∏—Ç channelWidth –∏–∑ Android ScanResult
     */
    private fun mapChannelWidth(channelWidth: Int): Int {
        return when (channelWidth) {
            ScanResult.CHANNEL_WIDTH_20MHZ -> 20
            ScanResult.CHANNEL_WIDTH_40MHZ -> 40
            ScanResult.CHANNEL_WIDTH_80MHZ -> 80
            ScanResult.CHANNEL_WIDTH_160MHZ -> 160
            ScanResult.CHANNEL_WIDTH_80MHZ_PLUS_MHZ -> 160 // 80+80 = 160 —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç
            else -> 20 // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —à–∏—Ä–∏–Ω—É –∫–∞–Ω–∞–ª–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π Android
     */
    private fun determineChannelWidthByFrequency(frequency: Int): Int {
        return when (frequency) {
            in Constants.FREQ_2_4_GHZ_MIN..Constants.FREQ_2_4_GHZ_MAX -> 20 // 2.4 –ì–ì—Ü –æ–±—ã—á–Ω–æ 20 –ú–ì—Ü
            in Constants.FREQ_5_GHZ_MIN..Constants.FREQ_5_GHZ_MAX -> 80 // 5 –ì–ì—Ü –æ–±—ã—á–Ω–æ 80 –ú–≥—Ü
            else -> 20
        }
    }
    
    /**
     * –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ ScanResult
     */
    private fun extractMetadata(scanResult: ScanResult): Map<String, String> {
        val metadata = mutableMapOf<String, String>()
        
        try {
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ –ø–æ OUI (Organizationally Unique Identifier)
            val oui = scanResult.BSSID?.take(8)?.replace(":", "")?.uppercase()
            if (!oui.isNullOrBlank()) {
                metadata["vendor"] = getVendorByOUI(oui)
            }
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Å–µ—Ç–∏
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è API 30+
                metadata["api_level"] = Build.VERSION.SDK_INT.toString()
            }
            
            // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞ Wi-Fi –ø–æ capabilities
            val wifiStandard = determineWifiStandard(scanResult.capabilities)
            if (wifiStandard.isNotBlank()) {
                metadata["wifi_standard"] = wifiStandard
            }
            
        } catch (e: Exception) {
            Log.w(TAG, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö", e)
        }
        
        return metadata
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –ø–æ OUI (–ø–µ—Ä–≤—ã–µ 3 –±–∞–π—Ç–∞ MAC-–∞–¥—Ä–µ—Å–∞)
     */
    private fun getVendorByOUI(oui: String): String {
        return when {
            oui.startsWith("00248C") -> "Ubiquiti Networks"
            oui.startsWith("001DD8") -> "Mikrotik"
            oui.startsWith("F8C4F3") || oui.startsWith("2C5D93") -> "TP-Link"
            oui.startsWith("502B73") || oui.startsWith("7CE9D3") -> "Cisco Systems"
            oui.startsWith("9094E4") || oui.startsWith("2CF05D") -> "ASUS"
            oui.startsWith("107B44") || oui.startsWith("F0B479") -> "Apple Inc."
            oui.startsWith("20C9D0") || oui.startsWith("E46F13") -> "D-Link Corporation"
            oui.startsWith("000B6B") || oui.startsWith("001E2A") -> "Netgear"
            oui.startsWith("001999") -> "Belkin International"
            oui.startsWith("0050F2") -> "Microsoft Corporation"
            oui.startsWith("6805CA") -> "Xiaomi"
            oui.startsWith("8863DF") -> "Huawei Technologies"
            else -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
        }
    }
    
    /**
     * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç Wi-Fi –ø–æ capabilities —Å—Ç—Ä–æ–∫–µ
     */
    private fun determineWifiStandard(capabilities: String): String {
        return when {
            capabilities.contains("802.11be", ignoreCase = true) -> "Wi-Fi 7 (802.11be)"
            capabilities.contains("802.11ax", ignoreCase = true) -> "Wi-Fi 6 (802.11ax)"
            capabilities.contains("802.11ac", ignoreCase = true) -> "Wi-Fi 5 (802.11ac)"
            capabilities.contains("802.11n", ignoreCase = true) -> "Wi-Fi 4 (802.11n)"
            capabilities.contains("802.11g", ignoreCase = true) -> "Wi-Fi 3 (802.11g)"
            capabilities.contains("802.11a", ignoreCase = true) -> "Wi-Fi 2 (802.11a)"
            capabilities.contains("802.11b", ignoreCase = true) -> "Wi-Fi 1 (802.11b)"
            else -> ""
        }
    }
    
    /**
     * –õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
     */
    private fun logScanResults(networks: List<WifiInfoDto>) {
        Log.d(TAG, "=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ===")
        
        networks.forEachIndexed { index, network ->
            Log.d(TAG, "${index + 1}. ${network.ssid.ifBlank { "<–°–∫—Ä—ã—Ç–∞—è>" }}")
            Log.d(TAG, "   BSSID: ${network.bssid}")
            Log.d(TAG, "   –°–∏–≥–Ω–∞–ª: ${network.level} dBm")
            Log.d(TAG, "   –ß–∞—Å—Ç–æ—Ç–∞: ${network.frequency} –ú–≥—Ü (${network.getFrequencyBand()})")
            Log.d(TAG, "   –ö–∞–Ω–∞–ª: ${network.getChannelNumber()}")
            Log.d(TAG, "   –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: ${network.capabilities}")
            Log.d(TAG, "   –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: ${network.metadata["vendor"] ?: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"}")
            Log.d(TAG, "   ---")
        }
        
        // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞–º
        val band24Count = networks.count { it.frequency in Constants.FREQ_2_4_GHZ_MIN..Constants.FREQ_2_4_GHZ_MAX }
        val band5Count = networks.count { it.is5GHz }
        val band6Count = networks.count { it.is6GHz }
        
        Log.d(TAG, "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: 2.4–ì–ì—Ü=$band24Count, 5–ì–ì—Ü=$band5Count, 6–ì–ì—Ü=$band6Count")
        
        Log.d(TAG, "=== –ö–û–ù–ï–¶ –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===")
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –º–∏–Ω—É—Ç—ã
     */
    fun getRecentScanCount(): Int {
        val currentTime = System.currentTimeMillis()
        scanTimestamps.removeAll { currentTime - it > SCAN_THROTTLE_WINDOW_MS }
        return scanTimestamps.size
    }
    
    /**
     * –û—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
     */
    fun getTimeUntilNextScanAvailable(): Long {
        val timeSinceLastScan = System.currentTimeMillis() - lastScanTime
        return (MIN_SCAN_INTERVAL_MS - timeSinceLastScan).coerceAtLeast(0L)
    }
}