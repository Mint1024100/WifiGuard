package com.wifiguard.feature.scanner.data.repository

import android.util.Log
import com.wifiguard.core.common.Constants
import com.wifiguard.core.common.Resource
import com.wifiguard.feature.scanner.data.datasource.WifiDataSource
import com.wifiguard.feature.scanner.data.mapper.WifiInfoMapper
import com.wifiguard.feature.scanner.domain.model.WifiInfo
import com.wifiguard.feature.scanner.domain.repository.WifiScannerRepository
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.flow
import kotlinx.coroutines.flow.flowOn
import kotlinx.coroutines.Dispatchers
import javax.inject.Inject
import javax.inject.Singleton

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Wi-Fi —Å–µ—Ç–µ–π
 * 
 * –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –º–µ–∂–¥—É:
 * - WifiDataSource (–ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Android API)
 * - WifiInfoMapper (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ DTO –≤ –¥–æ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏)
 * - –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * 
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Single Source of Truth –¥–ª—è Wi-Fi –¥–∞–Ω–Ω—ã—Ö
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
 * - Graceful –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–µ—Ç–∏ –∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 * - –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏
 * - –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ Flow
 * 
 * @param wifiDataSource –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö Wi-Fi —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param wifiInfoMapper –º–∞–ø–ø–µ—Ä –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è DTO -> Domain
 * 
 * @author WifiGuard Data Team
 * @since 1.0.0
 */
@Singleton
class WifiScannerRepositoryImpl @Inject constructor(
    private val wifiDataSource: WifiDataSource,
    private val wifiInfoMapper: WifiInfoMapper
) : WifiScannerRepository {
    
    companion object {
        private const val TAG = Constants.LogTags.WIFI_SCANNER
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
        private const val CACHE_VALIDITY_MS = 30_000L // 30 —Å–µ–∫—É–Ω–¥
        private const val MAX_CACHE_SIZE = 100 // –ú–∞–∫—Å–∏–º—É–º 100 —Å–µ—Ç–µ–π –≤ –∫—ç—à–µ
    }
    
    // –õ–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    private var cachedNetworks: List<WifiInfo> = emptyList()
    private var lastScanTime: Long = 0L
    private var lastScanError: Exception? = null
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Wi-Fi —Å–µ—Ç–µ–π
     * 
     * –õ–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã:
     * 1. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∫—ç—à–∞
     * 2. –ï—Å–ª–∏ –∫—ç—à —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
     * 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç DTO –≤ –¥–æ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
     * 4. –û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
     * 
     * @param forceRefresh –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
     * @return Flow —Å —Ä–µ—Å—É—Ä—Å–æ–º —Å–ø–∏—Å–∫–∞ Wi-Fi —Å–µ—Ç–µ–π
     */
    override fun getAvailableNetworks(forceRefresh: Boolean): Flow<Resource<List<WifiInfo>>> = flow {
        try {
            Log.d(TAG, "üì° –ó–∞–ø—Ä–æ—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Wi-Fi —Å–µ—Ç–µ–π (forceRefresh=$forceRefresh)")
            
            // –≠–º–∏—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
            emit(Resource.Loading())
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            val currentTime = System.currentTimeMillis()
            val cacheIsValid = !forceRefresh && 
                             cachedNetworks.isNotEmpty() && 
                             (currentTime - lastScanTime) < CACHE_VALIDITY_MS
            
            if (cacheIsValid) {
                Log.d(TAG, "üíæ –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞ (${cachedNetworks.size} —Å–µ—Ç–µ–π)")
                emit(Resource.Success(cachedNetworks))
                return@flow
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏ –ª–∏–º–∏—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (Android throttling)
            if (!forceRefresh && wifiDataSource.getRecentScanCount() >= 4) {
                val waitTime = wifiDataSource.getTimeUntilNextScanAvailable()
                if (waitTime > 0) {
                    Log.w(TAG, "‚è±Ô∏è Android throttling –∞–∫—Ç–∏–≤–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ ${waitTime}–º—Å")
                    
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —Å–æ —Å—Ç–∞—Ä—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                    if (cachedNetworks.isNotEmpty()) {
                        emit(Resource.Success(cachedNetworks))
                        return@flow
                    }
                    
                    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É
                    emit(Resource.Error(
                        Exception("–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–¥–æ–∂–¥–∏—Ç–µ ${waitTime/1000} —Å–µ–∫—É–Ω–¥.")
                    ))
                    return@flow
                }
            }
            
            // –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            Log.d(TAG, "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Wi-Fi —Å–µ—Ç–µ–π")
            val wifiDtoList = wifiDataSource.scanWifiNetworks(forceRefresh)
            
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º DTO –≤ –¥–æ–º–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
            val wifiNetworks = wifiDtoList.map { dto ->
                wifiInfoMapper.map(dto)
            }
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            val processedNetworks = processNetworks(wifiNetworks)
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
            updateCache(processedNetworks, currentTime)
            
            Log.i(TAG, "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${processedNetworks.size} —Å–µ—Ç–µ–π")
            emit(Resource.Success(processedNetworks))
            
        } catch (e: SecurityException) {
            Log.e(TAG, "üîí –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ Wi-Fi", e)
            lastScanError = e
            emit(Resource.Error(Exception(Constants.ErrorMessages.LOCATION_PERMISSION_REQUIRED, e)))
            
        } catch (e: IllegalStateException) {
            Log.e(TAG, "üì∂ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", e)
            lastScanError = e
            emit(Resource.Error(Exception(e.message ?: Constants.ErrorMessages.WIFI_NOT_ENABLED, e)))
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", e)
            lastScanError = e
            emit(Resource.Error(Exception(e.message ?: Constants.ErrorMessages.SCAN_FAILED, e)))
        }
    }.flowOn(Dispatchers.IO)
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
     */
    override suspend fun getCurrentConnection(): Resource<WifiInfo?> {
        return try {
            Log.d(TAG, "üì± –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏")
            
            val currentDto = wifiDataSource.getCurrentConnection()
            
            if (currentDto != null) {
                val currentNetwork = wifiInfoMapper.map(currentDto)
                Log.d(TAG, "‚úÖ –¢–µ–∫—É—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ: ${currentNetwork.displayName}")
                Resource.Success(currentNetwork)
            } else {
                Log.d(TAG, "üìµ –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
                Resource.Success(null)
            }
            
        } catch (e: SecurityException) {
            Log.e(TAG, "üîí –ù–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏", e)
            Resource.Error(Exception(Constants.ErrorMessages.LOCATION_PERMISSION_REQUIRED, e))
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", e)
            Resource.Error(Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏", e))
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á—ë–Ω –ª–∏ Wi-Fi –∞–¥–∞–ø—Ç–µ—Ä
     */
    override fun isWifiEnabled(): Boolean {
        return try {
            wifiDataSource.isWifiEnabled()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Wi-Fi", e)
            false
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    override fun hasRequiredPermissions(): Boolean {
        return try {
            wifiDataSource.hasRequiredPermissions()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π", e)
            false
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ throttling)
     */
    override fun getRecentScanCount(): Int {
        return try {
            wifiDataSource.getRecentScanCount()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á—ë—Ç—á–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π", e)
            0
        }
    }
    
    /**
     * –ü–æ–ª—É—á–∞–µ—Ç –≤—Ä–µ–º—è –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
     */
    override fun getTimeUntilNextScan(): Long {
        return try {
            wifiDataSource.getTimeUntilNextScanAvailable()
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è", e)
            0L
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω—é—é –æ—à–∏–±–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
     */
    override fun getLastScanError(): Exception? {
        return lastScanError
    }
    
    /**
     * –û—á–∏—â–∞–µ—Ç –∫—ç—à —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ—Ç–µ–π
     */
    override fun clearCache() {
        Log.d(TAG, "üóëÔ∏è –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        cachedNetworks = emptyList()
        lastScanTime = 0L
        lastScanError = null
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–µ—Ç–µ–π: —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç, —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç, –æ—á–∏—â–∞–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã
     */
    private fun processNetworks(networks: List<WifiInfo>): List<WifiInfo> {
        return networks
            .asSequence()
            // –§–∏–ª—å—Ç—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            .filter { network ->
                network.bssid.isNotBlank() && 
                network.frequency > 0 && 
                network.signalStrength < 0
            }
            // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ BSSID (–æ–¥–∏–Ω BSSID = –æ–¥–Ω–∞ —Ç–æ—á–∫–∞ –¥–æ—Å—Ç—É–ø–∞)
            .distinctBy { it.bssid }
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞ (—Å–∏–ª—å–Ω—ã–µ —Å–≤–µ—Ä—Ö—É)
            .sortedByDescending { it.signalStrength }
            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            .take(MAX_CACHE_SIZE)
            .toList()
    }
    
    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–∫–∞–ª—å–Ω—ã–π –∫—ç—à
     */
    private fun updateCache(networks: List<WifiInfo>, scanTime: Long) {
        cachedNetworks = networks
        lastScanTime = scanTime
        lastScanError = null // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
        
        Log.d(TAG, "üíæ –ö—ç—à –æ–±–Ω–æ–≤–ª—ë–Ω: ${networks.size} —Å–µ—Ç–µ–π, –≤—Ä–µ–º—è: ${scanTime}")
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ø-5 —Å–µ—Ç–µ–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (Constants.ENABLE_DEBUG_LOGGING && networks.isNotEmpty()) {
            Log.d(TAG, "üìä –¢–æ–ø-5 —Å–µ—Ç–µ–π –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞:")
            networks.take(5).forEachIndexed { index, network ->
                Log.d(TAG, "  ${index + 1}. ${network.displayName} (${network.signalStrength} dBm, ${network.encryptionType.displayName})")
            }
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫—ç—à–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
     */
    fun getCacheStatistics(): CacheStats {
        return CacheStats(
            cachedNetworksCount = cachedNetworks.size,
            lastScanTimestamp = lastScanTime,
            cacheAgeMs = System.currentTimeMillis() - lastScanTime,
            isValidCache = (System.currentTimeMillis() - lastScanTime) < CACHE_VALIDITY_MS,
            hasError = lastScanError != null
        )
    }
    
    /**
     * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
     */
    data class CacheStats(
        val cachedNetworksCount: Int,
        val lastScanTimestamp: Long,
        val cacheAgeMs: Long,
        val isValidCache: Boolean,
        val hasError: Boolean
    )
}