package com.wifiguard.app

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import com.wifiguard.core.common.Constants
import com.wifiguard.core.ui.theme.WifiGuardTheme
import com.wifiguard.navigation.WifiGuardNavigation
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.launch

/**
 * –ì–ª–∞–≤–Ω–∞—è –∏ –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–∞—è Activity –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WifiGuard
 * 
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Single Activity —Å Jetpack Compose –¥–ª—è:
 * - –û–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –ø–∞–º—è—Ç–∏
 * - –ü–ª–∞–≤–Ω—ã—Ö –∞–Ω–∏–º–∞—Ü–∏–π –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
 * - –£–ø—Ä–æ—â–µ–Ω–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * - –õ—ë–≥–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * 
 * –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–∏:
 * - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è–º–∏ (–ª–æ–∫–∞—Ü–∏—è, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
 * - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã Compose
 * - –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
 * 
 * @author WifiGuard Development Team
 * @since 1.0.0
 */
@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    
    companion object {
        private const val TAG = "${Constants.LOG_TAG}_MainActivity"
    }
    
    // –õ–∞—É–Ω—á–µ—Ä –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
    private val permissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        handlePermissionsResult(permissions)
    }
    
    // –õ–∞—É–Ω—á–µ—Ä –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private val appSettingsLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) {
        // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        checkAndRequestPermissions()
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ MainActivity")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        checkAndRequestPermissions()
        
        setContent {
            WifiGuardTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    WifiGuardMainContent()
                }
            }
        }
    }
    
    /**
     * –ì–ª–∞–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    @Composable
    private fun WifiGuardMainContent() {
        var permissionsGranted by remember { mutableStateOf(hasAllRequiredPermissions()) }
        
        if (permissionsGranted) {
            // –û—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            WifiGuardNavigation()
        } else {
            // –≠–∫—Ä–∞–Ω –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
            PermissionRequestScreen(
                onRequestPermissions = {
                    checkAndRequestPermissions()
                },
                onOpenSettings = {
                    openAppSettings()
                }
            )
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        LaunchedEffect(Unit) {
            permissionsGranted = hasAllRequiredPermissions()
        }
    }
    
    /**
     * –≠–∫—Ä–∞–Ω –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    private fun PermissionRequestScreen(
        onRequestPermissions: () -> Unit,
        onOpenSettings: () -> Unit
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { Text("üõ°Ô∏è WifiGuard") },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer
                    )
                )
            }
        ) { paddingValues ->
            androidx.compose.foundation.layout.Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(16.dp),
                horizontalAlignment = androidx.compose.ui.Alignment.CenterHorizontally,
                verticalArrangement = androidx.compose.foundation.layout.Arrangement.Center
            ) {
                Icon(
                    painter = androidx.compose.material.icons.Icons.Default.LocationOn,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(64.dp)
                )
                
                Spacer(modifier = Modifier.height(24.dp))
                
                Text(
                    text = "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã",
                    style = MaterialTheme.typography.headlineMedium
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = "–î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Wi-Fi —Å–µ—Ç–µ–π —Ç—Ä–µ–±—É—é—Ç—Å—è \n—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ \n–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = androidx.compose.ui.text.style.TextAlign.Center
                )
                
                Spacer(modifier = Modifier.height(32.dp))
                
                Button(
                    onClick = onRequestPermissions,
                    modifier = Modifier.fillMaxWidth(0.8f)
                ) {
                    Text("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                }
                
                Spacer(modifier = Modifier.height(16.dp))
                
                OutlinedButton(
                    onClick = onOpenSettings,
                    modifier = Modifier.fillMaxWidth(0.8f)
                ) {
                    Text("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                }
            }
        }
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    private fun checkAndRequestPermissions() {
        val requiredPermissions = getRequiredPermissions()
        val missingPermissions = requiredPermissions.filter { permission ->
            ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED
        }
        
        if (missingPermissions.isNotEmpty()) {
            Log.d(TAG, "–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $missingPermissions")
            permissionLauncher.launch(missingPermissions.toTypedArray())
        } else {
            Log.d(TAG, "‚úÖ –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
        }
    }
    
    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun getRequiredPermissions(): List<String> {
        val permissions = mutableListOf(
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_WIFI_STATE,
            Manifest.permission.CHANGE_WIFI_STATE,
            Manifest.permission.ACCESS_NETWORK_STATE
        )
        
        // –î–ª—è Android 13+ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            permissions.add(Manifest.permission.POST_NOTIFICATIONS)
        }
        
        // –î–ª—è Android 10+ –Ω—É–∂–Ω–æ FINE_LOCATION –≤–º–µ—Å—Ç–æ COARSE
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            // –£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ ACCESS_FINE_LOCATION
        }
        
        return permissions
    }
    
    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    private fun hasAllRequiredPermissions(): Boolean {
        return getRequiredPermissions().all { permission ->
            ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED
        }
    }
    
    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun handlePermissionsResult(permissions: Map<String, Boolean>) {
        val grantedPermissions = permissions.filter { it.value }
        val deniedPermissions = permissions.filter { !it.value }
        
        Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${grantedPermissions.keys}")
        
        if (deniedPermissions.isNotEmpty()) {
            Log.w(TAG, "‚ùå –û—Ç–∫–ª–æ–Ω—ë–Ω–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${deniedPermissions.keys}")
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            val criticalPermissions = listOf(
                Manifest.permission.ACCESS_FINE_LOCATION,
                Manifest.permission.ACCESS_WIFI_STATE
            )
            
            val criticalDenied = deniedPermissions.keys.any { it in criticalPermissions }
            
            if (criticalDenied) {
                showPermissionRationale()
            }
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º UI
        lifecycleScope.launch {
            // –¢—Ä–∏–≥–≥–µ—Ä–∏–º recomposition
        }
    }
    
    /**
     * –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ, –∑–∞—á–µ–º –Ω—É–∂–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
     */
    private fun showPermissionRationale() {
        androidx.appcompat.app.AlertDialog.Builder(this)
            .setTitle("üõ°Ô∏è –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
            .setMessage(
                "WifiGuard –Ω—É–∂–¥–∞–µ—Ç—Å—è –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è—Ö:\n\n" +
                "üìç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ - –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Wi-Fi —Å–µ—Ç–µ–π\n" +
                "üì∂ Wi-Fi - –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏\n" +
                "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è - –¥–ª—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ —É–≥—Ä–æ–∑–∞—Ö"
            )
            .setPositiveButton("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å") { _, _ ->
                checkAndRequestPermissions()
            }
            .setNegativeButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏") { _, _ ->
                openAppSettings()
            }
            .setCancelable(false)
            .show()
    }
    
    /**
     * –û—Ç–∫—Ä—ã–≤–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
     */
    private fun openAppSettings() {
        val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
            data = Uri.fromParts("package", packageName, null)
        }
        appSettingsLauncher.launch(intent)
    }
    
    override fun onResume() {
        super.onResume()
        Log.d(TAG, "üîÑ MainActivity –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
        if (hasAllRequiredPermissions()) {
            Log.d(TAG, "‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã")
        }
    }
    
    override fun onPause() {
        super.onPause()
        Log.d(TAG, "‚è∏Ô∏è MainActivity –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
    }
    
    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "üóëÔ∏è MainActivity —É–Ω–∏—á—Ç–æ–∂–µ–Ω–æ")
    }
}