package com.wifiguard.app

import android.app.Application
import android.app.NotificationChannel
import android.app.NotificationManager
import android.content.Context
import android.os.Build
import android.util.Log
import androidx.hilt.work.HiltWorkerFactory
import androidx.work.Configuration
import androidx.work.WorkManager
import com.wifiguard.core.common.Constants
import dagger.hilt.android.HiltAndroidApp
import javax.inject.Inject

/**
 * –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è WifiGuard
 * 
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:
 * - Dependency Injection (Hilt)
 * - –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
 * - WorkManager –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Wi-Fi
 * - –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
 * 
 * –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
 * - Single Activity —Å Jetpack Compose
 * - Clean Architecture —Å —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ–º –Ω–∞ –º–æ–¥—É–ª–∏
 * - –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
 */
@HiltAndroidApp
class WifiGuardApp : Application(), Configuration.Provider {
    
    @Inject
    lateinit var workerFactory: HiltWorkerFactory
    
    companion object {
        private const val TAG = Constants.LOG_TAG
        
        @Volatile
        private var INSTANCE: WifiGuardApp? = null
        
        fun getInstance(): WifiGuardApp {
            return INSTANCE ?: throw IllegalStateException(
                "WifiGuardApp –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ AndroidManifest.xml"
            )
        }
    }
    
    override fun onCreate() {
        super.onCreate()
        
        INSTANCE = this
        
        Log.i(TAG, "üöÄ –ó–∞–ø—É—Å–∫ WifiGuard –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        
        try {
            initializeNotificationChannels()
            setupGlobalExceptionHandler()
            
            Log.i(TAG, "‚úÖ WifiGuard —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏", e)
            // –í production –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å crash report
        }
    }
    
    /**
     * –°–æ–∑–¥–∞—ë—Ç –∫–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è Android 8.0+
     */
    private fun initializeNotificationChannels() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
            val notificationManager = getSystemService(Context.NOTIFICATION_SERVICE) as NotificationManager
            
            // –ö–∞–Ω–∞–ª –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≥—Ä–æ–∑ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            val securityChannel = NotificationChannel(
                Constants.NOTIFICATION_CHANNEL_ID,
                Constants.NOTIFICATION_CHANNEL_NAME,
                NotificationManager.IMPORTANCE_HIGH
            ).apply {
                description = "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≥—Ä–æ–∑–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ Wi-Fi —Å–µ—Ç–µ–π"
                enableLights(true)
                lightColor = android.graphics.Color.RED
                enableVibration(true)
                vibrationPattern = longArrayOf(0, 250, 250, 250)
                setShowBadge(true)
            }
            
            // –ö–∞–Ω–∞–ª –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            val monitoringChannel = NotificationChannel(
                "${Constants.NOTIFICATION_CHANNEL_ID}_monitoring",
                "–§–æ–Ω–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Wi-Fi",
                NotificationManager.IMPORTANCE_LOW
            ).apply {
                description = "–°—Ç–∞—Ç—É—Å —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Wi-Fi —Å–µ—Ç–µ–π"
                enableLights(false)
                enableVibration(false)
                setShowBadge(false)
            }
            
            // –ö–∞–Ω–∞–ª –¥–ª—è —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            val systemChannel = NotificationChannel(
                "${Constants.NOTIFICATION_CHANNEL_ID}_system",
                "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
                NotificationManager.IMPORTANCE_DEFAULT
            ).apply {
                description = "–°–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
                enableLights(false)
                enableVibration(true)
                setShowBadge(true)
            }
            
            notificationManager.apply {
                createNotificationChannel(securityChannel)
                createNotificationChannel(monitoringChannel)
                createNotificationChannel(systemChannel)
            }
            
            Log.d(TAG, "üì± –ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ–∑–¥–∞–Ω—ã")
        }
    }
    
    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
     */
    private fun setupGlobalExceptionHandler() {
        val defaultHandler = Thread.getDefaultUncaughtExceptionHandler()
        
        Thread.setDefaultUncaughtExceptionHandler { thread, exception ->
            try {
                Log.e(TAG, "üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ø–æ—Ç–æ–∫–µ: ${thread.name}", exception)
                
                if (Constants.ENABLE_DEBUG_LOGGING) {
                    Log.e(TAG, "=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø ===")
                    Log.e(TAG, "–ü–æ—Ç–æ–∫: ${thread.name}")
                    Log.e(TAG, "–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${exception.javaClass.simpleName}")
                    Log.e(TAG, "–°–æ–æ–±—â–µ–Ω–∏–µ: ${exception.message}")
                    exception.printStackTrace()
                }
                
                // –í production –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –∞–Ω–∞–ª–∏—Ç–∏–∫—É
                // crashlytics.recordException(exception)
                
            } catch (e: Exception) {
                Log.e(TAG, "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π", e)
            } finally {
                defaultHandler?.uncaughtException(thread, exception)
            }
        }
    }
    
    /**
     * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WorkManager —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π Hilt DI
     */
    override fun getWorkManagerConfiguration(): Configuration {
        return Configuration.Builder()
            .setWorkerFactory(workerFactory)
            .setMinimumLoggingLevel(
                if (Constants.ENABLE_DEBUG_LOGGING) Log.DEBUG else Log.INFO
            )
            .setMaxSchedulerLimit(20) // –ú–∞–∫—Å–∏–º—É–º 20 –∑–∞–¥–∞—á –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
            .build()
    }
    
    override fun onLowMemory() {
        super.onLowMemory()
        Log.w(TAG, "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–∞ —Å–∏–≥–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏")
        
        try {
            // –û—á–∏—â–∞–µ–º –∫—ç—à–∏ –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ –ø–∞–º—è—Ç–∏
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É image cache, network cache –∏ —Ç.–¥.
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ –ø–∞–º—è—Ç–∏", e)
        }
    }
    
    override fun onTerminate() {
        super.onTerminate()
        
        try {
            INSTANCE = null
            WorkManager.getInstance(this).cancelAllWork()
            Log.i(TAG, "üîö WifiGuard –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à—ë–Ω")
        } catch (e: Exception) {
            Log.e(TAG, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è", e)
        }
    }
}