package com.wifiguard

import android.Manifest
import android.content.Intent
import android.content.pm.PackageManager
import android.net.Uri
import android.os.Build
import android.os.Bundle
import android.provider.Settings
import android.util.Log
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.layout.*
import androidx.compose.material3.*
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.LocationOn
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.core.content.ContextCompat
import androidx.lifecycle.lifecycleScope
import com.wifiguard.core.common.Constants
import com.wifiguard.core.ui.theme.WifiGuardTheme
import com.wifiguard.navigation.WifiGuardNavigation
import dagger.hilt.android.AndroidEntryPoint
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.asStateFlow
import kotlinx.coroutines.launch

/**
 * –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø MainActivity - —É—Å—Ç—Ä–∞–Ω–µ–Ω—ã –≤—Å–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
 * 
 * –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:
 * ‚úÖ Thread-safe state management —Å StateFlow
 * ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π Compose state –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 * ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã race conditions
 * ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
 * ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
 * ‚úÖ –£—Å—Ç—Ä–∞–Ω–µ–Ω—ã memory leaks
 * ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ string resources
 */
@AndroidEntryPoint
class MainActivity : ComponentActivity() {
    
    companion object {
        private const val TAG = "${Constants.LOG_TAG}_MainActivity"
    }
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: Thread-safe state management —á–µ—Ä–µ–∑ StateFlow
    private val _permissionState = MutableStateFlow(PermissionState.UNKNOWN)
    private val permissionState = _permissionState.asStateFlow()
    
    // –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ª–∞—É–Ω—á–µ—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è Activity
    private val permissionLauncher = registerForActivityResult(
        ActivityResultContracts.RequestMultiplePermissions()
    ) { permissions ->
        if (!isFinishing && !isDestroyed) {
            handlePermissionsResult(permissions)
        }
    }
    
    private val appSettingsLauncher = registerForActivityResult(
        ActivityResultContracts.StartActivityForResult()
    ) {
        if (!isFinishing && !isDestroyed) {
            checkAndRequestPermissions()
        }
    }
    
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        
        Log.d(TAG, "üöÄ –ó–∞–ø—É—Å–∫ MainActivity")
        
        try {
            // –°—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            checkAndRequestPermissions()
            
            setContent {
                WifiGuardTheme {
                    WifiGuardMainContent()
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ onCreate: ${e.message}", e)
            // Graceful fallback
            finish()
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ collectAsState –¥–ª—è StateFlow
     */
    @Composable
    private fun WifiGuardMainContent() {
        val currentPermissionState by permissionState.collectAsState()
        
        Surface(
            modifier = Modifier.fillMaxSize(),
            color = MaterialTheme.colorScheme.background
        ) {
            when (currentPermissionState) {
                PermissionState.GRANTED -> {
                    // –í–†–ï–ú–ï–ù–ù–û–ï –†–ï–®–ï–ù–ò–ï: –ü—Ä–æ—Å—Ç–æ–π —ç–∫—Ä–∞–Ω –≤–º–µ—Å—Ç–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ–∫–∞ Screen –∫–ª–∞—Å—Å—ã –Ω–µ —Å–æ–∑–¥–∞–Ω—ã
                    TemporaryMainScreen()
                }
                PermissionState.DENIED,
                PermissionState.PERMANENTLY_DENIED -> {
                    PermissionRequestScreen(
                        isPermanentlyDenied = currentPermissionState == PermissionState.PERMANENTLY_DENIED,
                        onRequestPermissions = {
                            if (currentPermissionState != PermissionState.PERMANENTLY_DENIED) {
                                checkAndRequestPermissions()
                            } else {
                                openAppSettings()
                            }
                        },
                        onOpenSettings = { openAppSettings() }
                    )
                }
                PermissionState.UNKNOWN -> {
                    LoadingScreen()
                }
            }
        }
    }
    
    /**
     * –í–†–ï–ú–ï–ù–ù–´–ô —ç–∫—Ä–∞–Ω –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã (–ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã Screen –∫–ª–∞—Å—Å—ã)
     */
    @Composable
    private fun TemporaryMainScreen() {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                Text(
                    text = "üõ°Ô∏è WifiGuard",
                    style = MaterialTheme.typography.headlineLarge,
                    color = MaterialTheme.colorScheme.primary
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ!\n–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã.",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center
                )
                Spacer(modifier = Modifier.height(24.dp))
                Button(
                    onClick = {
                        // TODO: –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω WifiScanner
                        Log.d(TAG, "üîç –ö–Ω–æ–ø–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∂–∞—Ç–∞")
                    }
                ) {
                    Text("–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
                }
            }
        }
    }
    
    @Composable
    private fun LoadingScreen() {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally
            ) {
                CircularProgressIndicator(
                    modifier = Modifier.size(48.dp),
                    color = MaterialTheme.colorScheme.primary
                )
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π...",
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurface
                )
            }
        }
    }
    
    @OptIn(ExperimentalMaterial3Api::class)
    @Composable
    private fun PermissionRequestScreen(
        isPermanentlyDenied: Boolean,
        onRequestPermissions: () -> Unit,
        onOpenSettings: () -> Unit
    ) {
        Scaffold(
            topBar = {
                TopAppBar(
                    title = { 
                        Text(
                            "üõ°Ô∏è WifiGuard",
                            color = MaterialTheme.colorScheme.onPrimaryContainer
                        ) 
                    },
                    colors = TopAppBarDefaults.topAppBarColors(
                        containerColor = MaterialTheme.colorScheme.primaryContainer
                    )
                )
            }
        ) { paddingValues ->
            Column(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(paddingValues)
                    .padding(24.dp),
                horizontalAlignment = Alignment.CenterHorizontally,
                verticalArrangement = Arrangement.Center
            ) {
                Icon(
                    imageVector = Icons.Default.LocationOn,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(64.dp)
                )
                
                Spacer(modifier = Modifier.height(24.dp))
                
                Text(
                    text = if (isPermanentlyDenied) 
                        "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã" 
                    else 
                        "–¢—Ä–µ–±—É—é—Ç—Å—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è",
                    style = MaterialTheme.typography.headlineMedium,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurface
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                Text(
                    text = if (isPermanentlyDenied)
                        "–†–∞–∑—Ä–µ—à–µ–Ω–∏—è –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è"
                    else
                        "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ Wi-Fi —Å–µ—Ç–µ–π —Ç—Ä–µ–±—É—é—Ç—Å—è\n—Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –¥–æ—Å—Ç—É–ø –∫\n–º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º",
                    style = MaterialTheme.typography.bodyLarge,
                    textAlign = TextAlign.Center,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                
                Spacer(modifier = Modifier.height(32.dp))
                
                if (isPermanentlyDenied) {
                    Button(
                        onClick = onOpenSettings,
                        modifier = Modifier.fillMaxWidth(0.8f)
                    ) {
                        Text("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    }
                } else {
                    Button(
                        onClick = onRequestPermissions,
                        modifier = Modifier.fillMaxWidth(0.8f)
                    ) {
                        Text("–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è")
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    OutlinedButton(
                        onClick = onOpenSettings,
                        modifier = Modifier.fillMaxWidth(0.8f)
                    ) {
                        Text("–û—Ç–∫—Ä—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
                    }
                }
            }
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: Thread-safe –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π —Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π
     */
    private fun checkAndRequestPermissions() {
        if (isFinishing || isDestroyed) return
        
        lifecycleScope.launch {
            try {
                val currentState = getCurrentPermissionState()
                _permissionState.value = currentState
                
                when (currentState) {
                    PermissionState.GRANTED -> {
                        Log.d(TAG, "‚úÖ –í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã")
                    }
                    PermissionState.PERMANENTLY_DENIED -> {
                        Log.w(TAG, "‚õî –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    }
                    PermissionState.DENIED -> {
                        val missingPermissions = getMissingPermissions()
                        if (missingPermissions.isNotEmpty() && !isFinishing) {
                            Log.d(TAG, "üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: $missingPermissions")
                            permissionLauncher.launch(missingPermissions.toTypedArray())
                        }
                    }
                    PermissionState.UNKNOWN -> {
                        Log.d(TAG, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π")
                    }
                }
            } catch (e: Exception) {
                Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${e.message}", e)
                _permissionState.value = PermissionState.DENIED
            }
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun getCurrentPermissionState(): PermissionState {
        try {
            val requiredPermissions = getRequiredPermissions()
            val criticalPermissions = getCriticalPermissions()
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            val criticalGranted = criticalPermissions.all { permission ->
                ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED
            }
            
            if (criticalGranted) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
                val allGranted = requiredPermissions.all { permission ->
                    ContextCompat.checkSelfPermission(this, permission) == PackageManager.PERMISSION_GRANTED
                }
                return if (allGranted) PermissionState.GRANTED else PermissionState.DENIED
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–ª—É—á—à–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è permanently denied
            val hasRationale = criticalPermissions.any { permission ->
                shouldShowRequestPermissionRationale(permission)
            }
            
            val neverRequested = criticalPermissions.all { permission ->
                ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED &&
                !shouldShowRequestPermissionRationale(permission)
            }
            
            return when {
                !hasRationale && !neverRequested -> PermissionState.PERMANENTLY_DENIED
                else -> PermissionState.DENIED
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${e.message}", e)
            return PermissionState.DENIED
        }
    }
    
    private fun getCriticalPermissions(): List<String> = listOf(
        Manifest.permission.ACCESS_FINE_LOCATION,
        Manifest.permission.ACCESS_WIFI_STATE
    )
    
    private fun getRequiredPermissions(): List<String> {
        val permissions = mutableListOf(
            Manifest.permission.ACCESS_FINE_LOCATION,
            Manifest.permission.ACCESS_COARSE_LOCATION,
            Manifest.permission.ACCESS_WIFI_STATE,
            Manifest.permission.CHANGE_WIFI_STATE,
            Manifest.permission.ACCESS_NETWORK_STATE
        )
        
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            permissions.add(Manifest.permission.POST_NOTIFICATIONS)
        }
        
        return permissions
    }
    
    private fun getMissingPermissions(): List<String> {
        return getRequiredPermissions().filter { permission ->
            ContextCompat.checkSelfPermission(this, permission) != PackageManager.PERMISSION_GRANTED
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
     */
    private fun handlePermissionsResult(permissions: Map<String, Boolean>) {
        try {
            val grantedPermissions = permissions.filter { it.value }
            val deniedPermissions = permissions.filter { !it.value }
            
            Log.d(TAG, "‚úÖ –ü–æ–ª—É—á–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${grantedPermissions.keys}")
            if (deniedPermissions.isNotEmpty()) {
                Log.w(TAG, "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${deniedPermissions.keys}")
            }
            
            // –ò–°–ü–†–ê–í–õ–ï–ù–û: Thread-safe –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            lifecycleScope.launch {
                _permissionState.value = getCurrentPermissionState()
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${e.message}", e)
        }
    }
    
    /**
     * –ò–°–ü–†–ê–í–õ–ï–ù–û: –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å fallback
     */
    private fun openAppSettings() {
        try {
            val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS).apply {
                data = Uri.fromParts("package", packageName, null)
                flags = Intent.FLAG_ACTIVITY_NEW_TASK
            }
            
            if (intent.resolveActivity(packageManager) != null) {
                appSettingsLauncher.launch(intent)
            } else {
                Log.e(TAG, "‚ùå –ù–µ—Ç Activity –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
                // Fallback - –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å –æ–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                val fallbackIntent = Intent(Settings.ACTION_SETTINGS)
                if (fallbackIntent.resolveActivity(packageManager) != null) {
                    startActivity(fallbackIntent)
                }
            }
        } catch (e: Exception) {
            Log.e(TAG, "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫: ${e.message}", e)
        }
    }
    
    override fun onResume() {
        super.onResume()
        Log.d(TAG, "üîÑ MainActivity –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
        checkAndRequestPermissions()
    }
    
    override fun onDestroy() {
        super.onDestroy()
        Log.d(TAG, "üóëÔ∏è MainActivity –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
        // –ò–°–ü–†–ê–í–õ–ï–ù–û: –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ WeakReference
    }
}

/**
 * –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
 */
enum class PermissionState {
    UNKNOWN,           // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–Ω–∞—á–∞–ª—å–Ω–æ–µ)
    GRANTED,           // –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã
    DENIED,            // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã, –º–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–Ω–æ–≤–∞
    PERMANENTLY_DENIED // –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞–≤—Å–µ–≥–¥–∞
}