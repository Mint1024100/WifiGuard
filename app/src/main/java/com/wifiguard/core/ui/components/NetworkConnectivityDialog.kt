package com.wifiguard.core.ui.components

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.CloudOff
import androidx.compose.material.icons.filled.Wifi
import androidx.compose.material3.*
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp

@Composable
fun NetworkConnectivityDialog(
    isConnected: Boolean,
    connectionType: com.wifiguard.core.common.ConnectionType,
    onDismiss: () -> Unit,
    onRetry: (() -> Unit)? = null
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        icon = {
            Icon(
                imageVector = if (isConnected) Icons.Default.Wifi else Icons.Default.CloudOff,
                contentDescription = null,
                tint = if (isConnected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error
            )
        },
        title = {
            Text(
                text = if (isConnected) "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ" else "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É",
                style = MaterialTheme.typography.headlineSmall
            )
        },
        text = {
            Column(
                modifier = Modifier
                    .fillMaxWidth()
                    .verticalScroll(rememberScrollState())
            ) {
                Text(
                    text = if (isConnected) {
                        "–ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–Ω–ª–∞–π–Ω-–æ–ø–µ—Ä–∞—Ü–∏–∏."
                    } else {
                        "–î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ. " +
                        "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è."
                    },
                    style = MaterialTheme.typography.bodyMedium
                )
                
                Spacer(modifier = Modifier.height(16.dp))
                
                if (!isConnected) {
                    Text(
                        text = "–°–æ–≤–µ—Ç—ã –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Bold
                    )
                    
                    Spacer(modifier = Modifier.height(8.dp))
                    
                    Surface(
                        color = MaterialTheme.colorScheme.surfaceVariant,
                        shape = MaterialTheme.shapes.small
                    ) {
                        Column(
                            modifier = Modifier.padding(12.dp),
                            verticalArrangement = Arrangement.spacedBy(4.dp)
                        ) {
                            Text(
                                text = "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ Wi-Fi –∏–ª–∏ –º–æ–±–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                                style = MaterialTheme.typography.bodySmall
                            )
                            Text(
                                text = "‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä",
                                style = MaterialTheme.typography.bodySmall
                            )
                            Text(
                                text = "‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∂–∏–º –ø–æ–ª–µ—Ç–∞",
                                style = MaterialTheme.typography.bodySmall
                            )
                        }
                    }
                    
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Text(
                        text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Bold
                    )
                } else {
                    Text(
                        text = "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Bold
                    )
                }
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = MaterialTheme.colorScheme.surfaceVariant
                    )
                ) {
                    Column(
                        modifier = Modifier.padding(12.dp),
                        verticalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Text(
                            text = "–°—Ç–∞—Ç—É—Å: ${getConnectionStatusText(connectionType)}",
                            style = MaterialTheme.typography.bodySmall
                        )
                        Text(
                            text = "–¢–∏–ø: ${getConnectionTypeText(connectionType)}",
                            style = MaterialTheme.typography.bodySmall
                        )
                    }
                }
                
                if (isConnected) {
                    Spacer(modifier = Modifier.height(16.dp))
                    
                    Surface(
                        color = MaterialTheme.colorScheme.primaryContainer,
                        shape = MaterialTheme.shapes.small
                    ) {
                        Text(
                            text = "üí° –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –æ–Ω–ª–∞–π–Ω-–æ–ø–µ—Ä–∞—Ü–∏–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã —É–≥—Ä–æ–∑ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏.",
                            style = MaterialTheme.typography.bodySmall,
                            modifier = Modifier.padding(12.dp)
                        )
                    }
                }
            }
        },
        confirmButton = {
            if (isConnected) {
                Button(onClick = onDismiss) {
                    Text("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                }
            } else {
                if (onRetry != null) {
                    Button(onClick = onRetry) {
                        Text("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å")
                    }
                } else {
                    Button(onClick = onDismiss) {
                        Text("–û–ö")
                    }
                }
            }
        },
        dismissButton = {
            if (!isConnected && onRetry != null) {
                TextButton(onClick = onDismiss) {
                    Text("–û—Ç–º–µ–Ω–∞")
                }
            }
        }
    )
}

@Composable
private fun getConnectionStatusText(connectionType: com.wifiguard.core.common.ConnectionType): String {
    return when (connectionType) {
        com.wifiguard.core.common.ConnectionType.WIFI -> "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Wi-Fi"
        com.wifiguard.core.common.ConnectionType.CELLULAR -> "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –º–æ–±–∏–ª—å–Ω–æ–π —Å–µ—Ç–∏"
        com.wifiguard.core.common.ConnectionType.ETHERNET -> "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Ethernet"
        com.wifiguard.core.common.ConnectionType.UNKNOWN -> "–ü–æ–¥–∫–ª—é—á–µ–Ω–æ (—Ç–∏–ø –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω)"
        com.wifiguard.core.common.ConnectionType.NONE -> "–ù–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
    }
}

@Composable
private fun getConnectionTypeText(connectionType: com.wifiguard.core.common.ConnectionType): String {
    return when (connectionType) {
        com.wifiguard.core.common.ConnectionType.WIFI -> "Wi-Fi"
        com.wifiguard.core.common.ConnectionType.CELLULAR -> "–ú–æ–±–∏–ª—å–Ω–∞—è —Å–µ—Ç—å"
        com.wifiguard.core.common.ConnectionType.ETHERNET -> "Ethernet"
        com.wifiguard.core.common.ConnectionType.UNKNOWN -> "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
        com.wifiguard.core.common.ConnectionType.NONE -> "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    }
}